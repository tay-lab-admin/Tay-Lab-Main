function [methodinfo,structs,enuminfo,ThunkLibName]=ftd2xx
%FTD2XX Create structures to define interfaces found in 'ftd2xx'.

%This function was generated by loadlibrary.m parser version 1.1.6.32 on Mon Apr 30 10:08:17 2012
%perl options:'ftd2xx.i -outfile=ftd2xx.m -thunkfile=ftd2xx_thunk_pcwin64.c'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'ftd2xx_thunk_pcwin64');
% long FT_Open ( int deviceNumber , FT_HANDLE * pHandle ); 
fcns.thunkname{fcnNum}='longint32voidPtrThunk';fcns.name{fcnNum}='FT_Open'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'int32', 'ulongPtr'};fcnNum=fcnNum+1;
% long FT_OpenEx ( PVOID pArg1 , DWORD Flags , FT_HANDLE * pHandle ); 
fcns.thunkname{fcnNum}='longcstringulongvoidPtrThunk';fcns.name{fcnNum}='FT_OpenEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% long FT_ListDevices ( PVOID pArg1 , PVOID pArg2 , DWORD Flags ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='FT_ListDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% long FT_Close ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_Close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_Read ( FT_HANDLE ftHandle , LPVOID lpBuffer , DWORD nBufferSize , LPDWORD lpBytesReturned ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='FT_Read'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_Write ( FT_HANDLE ftHandle , LPVOID lpBuffer , DWORD nBufferSize , LPDWORD lpBytesWritten ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='FT_Write'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_IoCtl ( FT_HANDLE ftHandle , DWORD dwIoControlCode , LPVOID lpInBuf , DWORD nInBufSize , LPVOID lpOutBuf , DWORD nOutBufSize , LPDWORD lpBytesReturned , LPOVERLAPPED lpOverlapped ); 
fcns.thunkname{fcnNum}='longulongulongvoidPtrulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FT_IoCtl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'uint16Ptr', 'ulong', 'uint16Ptr', 'ulong', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% long FT_SetBaudRate ( FT_HANDLE ftHandle , ULONG BaudRate ); 
fcns.thunkname{fcnNum}='longulongulongThunk';fcns.name{fcnNum}='FT_SetBaudRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% long FT_SetDivisor ( FT_HANDLE ftHandle , USHORT Divisor ); 
fcns.thunkname{fcnNum}='longulonguint16Thunk';fcns.name{fcnNum}='FT_SetDivisor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint16'};fcnNum=fcnNum+1;
% long FT_SetDataCharacteristics ( FT_HANDLE ftHandle , UCHAR WordLength , UCHAR StopBits , UCHAR Parity ); 
fcns.thunkname{fcnNum}='longulonguint8uint8uint8Thunk';fcns.name{fcnNum}='FT_SetDataCharacteristics'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint8', 'uint8', 'uint8'};fcnNum=fcnNum+1;
% long FT_SetFlowControl ( FT_HANDLE ftHandle , USHORT FlowControl , UCHAR XonChar , UCHAR XoffChar ); 
fcns.thunkname{fcnNum}='longulonguint16uint8uint8Thunk';fcns.name{fcnNum}='FT_SetFlowControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint16', 'uint8', 'uint8'};fcnNum=fcnNum+1;
% long FT_ResetDevice ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_ResetDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_SetDtr ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_SetDtr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_ClrDtr ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_ClrDtr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_SetRts ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_SetRts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_ClrRts ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_ClrRts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_GetModemStatus ( FT_HANDLE ftHandle , ULONG * pModemStatus ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='FT_GetModemStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% long FT_SetChars ( FT_HANDLE ftHandle , UCHAR EventChar , UCHAR EventCharEnabled , UCHAR ErrorChar , UCHAR ErrorCharEnabled ); 
fcns.thunkname{fcnNum}='longulonguint8uint8uint8uint8Thunk';fcns.name{fcnNum}='FT_SetChars'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint8', 'uint8', 'uint8', 'uint8'};fcnNum=fcnNum+1;
% long FT_Purge ( FT_HANDLE ftHandle , ULONG Mask ); 
fcns.thunkname{fcnNum}='longulongulongThunk';fcns.name{fcnNum}='FT_Purge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% long FT_SetTimeouts ( FT_HANDLE ftHandle , ULONG ReadTimeout , ULONG WriteTimeout ); 
fcns.thunkname{fcnNum}='longulongulongulongThunk';fcns.name{fcnNum}='FT_SetTimeouts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% long FT_GetQueueStatus ( FT_HANDLE ftHandle , DWORD * dwRxBytes ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='FT_GetQueueStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_SetEventNotification ( FT_HANDLE ftHandle , DWORD Mask , PVOID Param ); 
fcns.thunkname{fcnNum}='longulongulongcstringThunk';fcns.name{fcnNum}='FT_SetEventNotification'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% long FT_GetStatus ( FT_HANDLE ftHandle , DWORD * dwRxBytes , DWORD * dwTxBytes , DWORD * dwEventDWord ); 
fcns.thunkname{fcnNum}='longulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FT_GetStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_SetBreakOn ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_SetBreakOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_SetBreakOff ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_SetBreakOff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_SetWaitMask ( FT_HANDLE ftHandle , DWORD Mask ); 
fcns.thunkname{fcnNum}='longulongulongThunk';fcns.name{fcnNum}='FT_SetWaitMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% long FT_WaitOnMask ( FT_HANDLE ftHandle , DWORD * Mask ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='FT_WaitOnMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_GetEventStatus ( FT_HANDLE ftHandle , DWORD * dwEventDWord ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='FT_GetEventStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_ReadEE ( FT_HANDLE ftHandle , DWORD dwWordOffset , LPWORD lpwValue ); 
fcns.thunkname{fcnNum}='longulongulongvoidPtrThunk';fcns.name{fcnNum}='FT_ReadEE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% long FT_WriteEE ( FT_HANDLE ftHandle , DWORD dwWordOffset , WORD wValue ); 
fcns.thunkname{fcnNum}='longulongulonguint16Thunk';fcns.name{fcnNum}='FT_WriteEE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'uint16'};fcnNum=fcnNum+1;
% long FT_EraseEE ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_EraseEE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_EE_Program ( FT_HANDLE ftHandle , PFT_PROGRAM_DATA pData ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='FT_EE_Program'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ft_program_dataPtr'};fcnNum=fcnNum+1;
% long FT_EE_ProgramEx ( FT_HANDLE ftHandle , PFT_PROGRAM_DATA pData , char * Manufacturer , char * ManufacturerId , char * Description , char * SerialNumber ); 
fcns.thunkname{fcnNum}='longulongvoidPtrcstringcstringcstringcstringThunk';fcns.name{fcnNum}='FT_EE_ProgramEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ft_program_dataPtr', 'cstring', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% long FT_EE_Read ( FT_HANDLE ftHandle , PFT_PROGRAM_DATA pData ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='FT_EE_Read'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ft_program_dataPtr'};fcnNum=fcnNum+1;
% long FT_EE_ReadEx ( FT_HANDLE ftHandle , PFT_PROGRAM_DATA pData , char * Manufacturer , char * ManufacturerId , char * Description , char * SerialNumber ); 
fcns.thunkname{fcnNum}='longulongvoidPtrcstringcstringcstringcstringThunk';fcns.name{fcnNum}='FT_EE_ReadEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ft_program_dataPtr', 'cstring', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% long FT_EE_UASize ( FT_HANDLE ftHandle , LPDWORD lpdwSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='FT_EE_UASize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_EE_UAWrite ( FT_HANDLE ftHandle , PUCHAR pucData , DWORD dwDataLen ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='FT_EE_UAWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint8Ptr', 'ulong'};fcnNum=fcnNum+1;
% long FT_EE_UARead ( FT_HANDLE ftHandle , PUCHAR pucData , DWORD dwDataLen , LPDWORD lpdwBytesRead ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='FT_EE_UARead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint8Ptr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_SetLatencyTimer ( FT_HANDLE ftHandle , UCHAR ucLatency ); 
fcns.thunkname{fcnNum}='longulonguint8Thunk';fcns.name{fcnNum}='FT_SetLatencyTimer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint8'};fcnNum=fcnNum+1;
% long FT_GetLatencyTimer ( FT_HANDLE ftHandle , PUCHAR pucLatency ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='FT_GetLatencyTimer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint8Ptr'};fcnNum=fcnNum+1;
% long FT_SetBitMode ( FT_HANDLE ftHandle , UCHAR ucMask , UCHAR ucEnable ); 
fcns.thunkname{fcnNum}='longulonguint8uint8Thunk';fcns.name{fcnNum}='FT_SetBitMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint8', 'uint8'};fcnNum=fcnNum+1;
% long FT_GetBitMode ( FT_HANDLE ftHandle , PUCHAR pucMode ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='FT_GetBitMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint8Ptr'};fcnNum=fcnNum+1;
% long FT_SetUSBParameters ( FT_HANDLE ftHandle , ULONG ulInTransferSize , ULONG ulOutTransferSize ); 
fcns.thunkname{fcnNum}='longulongulongulongThunk';fcns.name{fcnNum}='FT_SetUSBParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% long FT_SetDeadmanTimeout ( FT_HANDLE ftHandle , ULONG ulDeadmanTimeout ); 
fcns.thunkname{fcnNum}='longulongulongThunk';fcns.name{fcnNum}='FT_SetDeadmanTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% long FT_GetDeviceInfo ( FT_HANDLE ftHandle , FT_DEVICE * lpftDevice , LPDWORD lpdwID , PCHAR SerialNumber , PCHAR Description , LPVOID Dummy ); 
fcns.thunkname{fcnNum}='longulongvoidPtrvoidPtrcstringcstringvoidPtrThunk';fcns.name{fcnNum}='FT_GetDeviceInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr', 'uint32Ptr', 'cstring', 'cstring', 'uint16Ptr'};fcnNum=fcnNum+1;
% long FT_StopInTask ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_StopInTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_RestartInTask ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_RestartInTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_SetResetPipeRetryCount ( FT_HANDLE ftHandle , DWORD dwCount ); 
fcns.thunkname{fcnNum}='longulongulongThunk';fcns.name{fcnNum}='FT_SetResetPipeRetryCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% long FT_ResetPort ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_ResetPort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_CyclePort ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_CyclePort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_W32_CreateFile ( LPCSTR lpszName , DWORD dwAccess , DWORD dwShareMode , LPSECURITY_ATTRIBUTES lpSecurityAttributes , DWORD dwCreate , DWORD dwAttrsAndFlags , HANDLE hTemplate ); 
fcns.thunkname{fcnNum}='longcstringulongulongvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='FT_W32_CreateFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr', 'ulong', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_W32_CloseHandle ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_W32_CloseHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_W32_ReadFile ( FT_HANDLE ftHandle , LPVOID lpBuffer , DWORD nBufferSize , LPDWORD lpBytesReturned , LPOVERLAPPED lpOverlapped ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FT_W32_ReadFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'ulong', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% long FT_W32_WriteFile ( FT_HANDLE ftHandle , LPVOID lpBuffer , DWORD nBufferSize , LPDWORD lpBytesWritten , LPOVERLAPPED lpOverlapped ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FT_W32_WriteFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'ulong', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% long FT_W32_GetLastError ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_W32_GetLastError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_W32_GetOverlappedResult ( FT_HANDLE ftHandle , LPOVERLAPPED lpOverlapped , LPDWORD lpdwBytesTransferred , BOOL bWait ); 
fcns.thunkname{fcnNum}='longulongvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='FT_W32_GetOverlappedResult'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 's_OVERLAPPEDPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% long FT_W32_CancelIo ( FT_HANDLE ftHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='FT_W32_CancelIo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% long FT_CreateDeviceInfoList ( LPDWORD lpdwNumDevs ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='FT_CreateDeviceInfoList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_GetDeviceInfoList ( FT_DEVICE_LIST_INFO_NODE * pDest , LPDWORD lpdwNumDevs ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FT_GetDeviceInfoList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'s_ft_device_list_info_nodePtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_GetDeviceInfoDetail ( DWORD dwIndex , LPDWORD lpdwFlags , LPDWORD lpdwType , LPDWORD lpdwID , LPDWORD lpdwLocId , LPVOID lpSerialNumber , LPVOID lpDescription , FT_HANDLE * pftHandle ); 
fcns.thunkname{fcnNum}='longulongvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FT_GetDeviceInfoDetail'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint16Ptr', 'uint16Ptr', 'ulongPtr'};fcnNum=fcnNum+1;
% long FT_GetDriverVersion ( FT_HANDLE ftHandle , LPDWORD lpdwVersion ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='FT_GetDriverVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% long FT_GetLibraryVersion ( LPDWORD lpdwVersion ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='FT_GetLibraryVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
structs.s_OVERLAPPED.members=struct('Internal', 'ulong', 'InternalHigh', 'ulong', 'Offset', 'ulong', 'OffsetHigh', 'ulong', 'hEvent', 'uint32Ptr');
structs.s_SECURITY_ATTRIBUTES.members=struct('nLength', 'ulong', 'lpSecurityDescriptor', 'uint16Ptr', 'bInheritHandle', 'int32');
structs.ft_program_data.members=struct('Signature1', 'ulong', 'Signature2', 'ulong', 'Version', 'ulong', 'VendorId', 'uint16', 'ProductId', 'uint16', 'Manufacturer', 'cstring', 'ManufacturerId', 'cstring', 'Description', 'cstring', 'SerialNumber', 'cstring', 'MaxPower', 'uint16', 'PnP', 'uint16', 'SelfPowered', 'uint16', 'RemoteWakeup', 'uint16', 'Rev4', 'uint8', 'IsoIn', 'uint8', 'IsoOut', 'uint8', 'PullDownEnable', 'uint8', 'SerNumEnable', 'uint8', 'USBVersionEnable', 'uint8', 'USBVersion', 'uint16', 'Rev5', 'uint8', 'IsoInA', 'uint8', 'IsoInB', 'uint8', 'IsoOutA', 'uint8', 'IsoOutB', 'uint8', 'PullDownEnable5', 'uint8', 'SerNumEnable5', 'uint8', 'USBVersionEnable5', 'uint8', 'USBVersion5', 'uint16', 'AIsHighCurrent', 'uint8', 'BIsHighCurrent', 'uint8', 'IFAIsFifo', 'uint8', 'IFAIsFifoTar', 'uint8', 'IFAIsFastSer', 'uint8', 'AIsVCP', 'uint8', 'IFBIsFifo', 'uint8', 'IFBIsFifoTar', 'uint8', 'IFBIsFastSer', 'uint8', 'BIsVCP', 'uint8', 'UseExtOsc', 'uint8', 'HighDriveIOs', 'uint8', 'EndpointSize', 'uint8', 'PullDownEnableR', 'uint8', 'SerNumEnableR', 'uint8', 'InvertTXD', 'uint8', 'InvertRXD', 'uint8', 'InvertRTS', 'uint8', 'InvertCTS', 'uint8', 'InvertDTR', 'uint8', 'InvertDSR', 'uint8', 'InvertDCD', 'uint8', 'InvertRI', 'uint8', 'Cbus0', 'uint8', 'Cbus1', 'uint8', 'Cbus2', 'uint8', 'Cbus3', 'uint8', 'Cbus4', 'uint8', 'RIsVCP', 'uint8');
structs.s_FTTIMEOUTS.members=struct('ReadIntervalTimeout', 'ulong', 'ReadTotalTimeoutMultiplier', 'ulong', 'ReadTotalTimeoutConstant', 'ulong', 'WriteTotalTimeoutMultiplier', 'ulong', 'WriteTotalTimeoutConstant', 'ulong');
structs.s_ft_device_list_info_node.members=struct('Flags', 'ulong', 'Type', 'ulong', 'ID', 'ulong', 'LocId', 'ulong', 'SerialNumber', 'int8#16', 'Description', 'int8#64', 'ftHandle', 'ulong');
methodinfo=fcns;